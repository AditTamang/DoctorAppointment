[33mcommit 0ccd7bbd5b4be521a10790fb07f2b3dbf59a5c6b[m
Author: AditTamang <tamangadit86@gmail.com>
Date:   Fri Apr 25 15:31:10 2025 +0545

    Doctor Registration Request

[1mdiff --git a/src/main/java/com/doctorapp/dao/DoctorRegistrationRequestDAO.java b/src/main/java/com/doctorapp/dao/DoctorRegistrationRequestDAO.java[m
[1mindex 4c49c49..44c1b54 100644[m
[1m--- a/src/main/java/com/doctorapp/dao/DoctorRegistrationRequestDAO.java[m
[1m+++ b/src/main/java/com/doctorapp/dao/DoctorRegistrationRequestDAO.java[m
[36m@@ -55,7 +55,13 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
                 pstmt.setNull(7, java.sql.Types.DATE);[m
             }[m
 [m
[31m-            pstmt.setString(8, request.getGender());[m
[32m+[m[32m            // Handle gender (ENUM type in database with values 'Male', 'Female', 'Other')[m
[32m+[m[32m            String standardizedGender = standardizeGender(request.getGender());[m
[32m+[m[32m            if (standardizedGender != null) {[m
[32m+[m[32m                pstmt.setString(8, standardizedGender);[m
[32m+[m[32m            } else {[m
[32m+[m[32m                pstmt.setNull(8, java.sql.Types.VARCHAR);[m
[32m+[m[32m            }[m
             pstmt.setString(9, request.getAddress());[m
             pstmt.setString(10, request.getSpecialization());[m
             pstmt.setString(11, request.getQualification());[m
[36m@@ -86,23 +92,9 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
      * @return List of all doctor registration requests[m
      */[m
     public List<DoctorRegistrationRequest> getAllRequests() {[m
[31m-        List<DoctorRegistrationRequest> requests = new ArrayList<>();[m
[31m-        String query = "SELECT * FROM doctor_registration_requests ORDER BY created_at DESC";[m
[31m-[m
[31m-        try (Connection conn = DBConnection.getConnection();[m
[31m-             PreparedStatement pstmt = conn.prepareStatement(query);[m
[31m-             ResultSet rs = pstmt.executeQuery()) {[m
[31m-[m
[31m-            while (rs.next()) {[m
[31m-                DoctorRegistrationRequest request = mapResultSetToRequest(rs);[m
[31m-                requests.add(request);[m
[31m-            }[m
[31m-[m
[31m-        } catch (SQLException | ClassNotFoundException e) {[m
[31m-            e.printStackTrace();[m
[31m-        }[m
[31m-[m
[31m-        return requests;[m
[32m+[m[32m        // Since approved and rejected requests are now deleted,[m
[32m+[m[32m        // this method will only return pending requests[m
[32m+[m[32m        return getPendingRequests();[m
     }[m
 [m
     /**[m
[36m@@ -218,6 +210,13 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
         // Get the request[m
         DoctorRegistrationRequest request = getRequestById(id);[m
         if (request == null) {[m
[32m+[m[32m            System.err.println("Doctor registration request not found with ID: " + id);[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Check if the request is already approved or rejected[m
[32m+[m[32m        if (!"PENDING".equals(request.getStatus())) {[m
[32m+[m[32m            System.err.println("Cannot approve request with status: " + request.getStatus());[m
             return false;[m
         }[m
 [m
[36m@@ -225,8 +224,22 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
         boolean success = false;[m
 [m
         try {[m
[32m+[m[32m            // Get connection and start transaction[m
[32m+[m[32m            System.out.println("Starting transaction for approving doctor request ID: " + id);[m
             conn = DBConnection.getConnection();[m
[31m-            conn.setAutoCommit(false); // Start transaction[m
[32m+[m[32m            conn.setAutoCommit(false);[m
[32m+[m
[32m+[m[32m            // Check if email already exists in users table before proceeding[m
[32m+[m[32m            String checkEmailQuery = "SELECT COUNT(*) FROM users WHERE email = ?";[m
[32m+[m[32m            try (PreparedStatement checkStmt = conn.prepareStatement(checkEmailQuery)) {[m
[32m+[m[32m                checkStmt.setString(1, request.getEmail());[m
[32m+[m[32m                try (ResultSet rs = checkStmt.executeQuery()) {[m
[32m+[m[32m                    if (rs.next() && rs.getInt(1) > 0) {[m
[32m+[m[32m                        System.err.println("Email already exists in users table: " + request.getEmail());[m
[32m+[m[32m                        throw new SQLException("Email already exists in the system: " + request.getEmail());[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
 [m
             // Create user record[m
             User user = new User();[m
[36m@@ -238,54 +251,221 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
             user.setFirstName(request.getFirstName());[m
             user.setLastName(request.getLastName());[m
             user.setDateOfBirth(request.getDateOfBirth());[m
[31m-            user.setGender(request.getGender());[m
[32m+[m
[32m+[m[32m            // Ensure gender is properly formatted for the database ENUM[m
[32m+[m[32m            user.setGender(standardizeGender(request.getGender()));[m
[32m+[m
             user.setAddress(request.getAddress());[m
 [m
[32m+[m[32m            System.out.println("Creating user with email: " + user.getEmail() + " and username: " + user.getUsername());[m
[32m+[m
[32m+[m[32m            // Create user and get the generated ID[m
             int userId = createUser(conn, user);[m
             if (userId <= 0) {[m
                 throw new SQLException("Failed to create user record");[m
             }[m
 [m
[31m-            // Create doctor record[m
[31m-            String doctorQuery = "INSERT INTO doctors (user_id, specialization, qualification, experience, bio) VALUES (?, ?, ?, ?, ?)";[m
[31m-            try (PreparedStatement pstmt = conn.prepareStatement(doctorQuery)) {[m
[31m-                pstmt.setInt(1, userId);[m
[31m-                pstmt.setString(2, request.getSpecialization());[m
[31m-                pstmt.setString(3, request.getQualification());[m
[31m-                pstmt.setString(4, request.getExperience());[m
[31m-                pstmt.setString(5, request.getBio());[m
[31m-                pstmt.executeUpdate();[m
[32m+[m[32m            System.out.println("User created successfully with ID: " + userId);[m
[32m+[m
[32m+[m[32m            // Create doctor record with all required fields[m
[32m+[m[32m            System.out.println("Creating doctor record for user ID: " + userId);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                // First check the structure of the doctors table to see what columns exist[m
[32m+[m[32m                System.out.println("Checking doctors table structure...");[m
[32m+[m[32m                boolean hasEmailColumn = false;[m
[32m+[m[32m                boolean hasPhoneColumn = false;[m
[32m+[m[32m                boolean hasAddressColumn = false;[m
[32m+[m
[32m+[m[32m                try {[m
[32m+[m[32m                    // Get metadata about the doctors table[m
[32m+[m[32m                    java.sql.DatabaseMetaData dbmd = conn.getMetaData();[m
[32m+[m[32m                    try (ResultSet columns = dbmd.getColumns(null, null, "doctors", null)) {[m
[32m+[m[32m                        while (columns.next()) {[m
[32m+[m[32m                            String columnName = columns.getString("COLUMN_NAME");[m
[32m+[m[32m                            System.out.println("Found column: " + columnName);[m
[32m+[m
[32m+[m[32m                            if ("email".equalsIgnoreCase(columnName)) {[m
[32m+[m[32m                                hasEmailColumn = true;[m
[32m+[m[32m                            } else if ("phone".equalsIgnoreCase(columnName)) {[m
[32m+[m[32m                                hasPhoneColumn = true;[m
[32m+[m[32m                            } else if ("address".equalsIgnoreCase(columnName)) {[m
[32m+[m[32m                                hasAddressColumn = true;[m
[32m+[m[32m                            }[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m[32m                } catch (SQLException e) {[m
[32m+[m[32m                    System.out.println("Warning: Could not check table structure: " + e.getMessage());[m
[32m+[m[32m                    // Continue with minimal columns[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                // Build the SQL query dynamically based on the columns that exist[m
[32m+[m[32m                StringBuilder queryBuilder = new StringBuilder("INSERT INTO doctors (user_id, specialization, qualification, experience");[m
[32m+[m[32m                if (hasEmailColumn) queryBuilder.append(", email");[m
[32m+[m[32m                if (hasPhoneColumn) queryBuilder.append(", phone");[m
[32m+[m[32m                if (hasAddressColumn) queryBuilder.append(", address");[m
[32m+[m[32m                queryBuilder.append(") VALUES (?, ?, ?, ?");[m
[32m+[m[32m                if (hasEmailColumn) queryBuilder.append(", ?");[m
[32m+[m[32m                if (hasPhoneColumn) queryBuilder.append(", ?");[m
[32m+[m[32m                if (hasAddressColumn) queryBuilder.append(", ?");[m
[32m+[m[32m                queryBuilder.append(")");[m
[32m+[m
[32m+[m[32m                String doctorQuery = queryBuilder.toString();[m
[32m+[m[32m                System.out.println("Using SQL query: " + doctorQuery);[m
[32m+[m
[32m+[m[32m                try (PreparedStatement pstmt = conn.prepareStatement(doctorQuery)) {[m
[32m+[m[32m                    int paramIndex = 1;[m
[32m+[m[32m                    pstmt.setInt(paramIndex++, userId);[m
[32m+[m
[32m+[m[32m                    // Set required fields with null checks[m
[32m+[m[32m                    pstmt.setString(paramIndex++, request.getSpecialization() != null ? request.getSpecialization() : "General");[m
[32m+[m[32m                    pstmt.setString(paramIndex++, request.getQualification() != null ? request.getQualification() : "MBBS");[m
[32m+[m[32m                    pstmt.setString(paramIndex++, request.getExperience() != null ? request.getExperience() : "0 years");[m
[32m+[m
[32m+[m[32m                    // Set optional fields if they exist in the table[m
[32m+[m[32m                    if (hasEmailColumn) {[m
[32m+[m[32m                        pstmt.setString(paramIndex++, request.getEmail() != null ? request.getEmail() : "");[m
[32m+[m[32m                    }[m
[32m+[m[32m                    if (hasPhoneColumn) {[m
[32m+[m[32m                        pstmt.setString(paramIndex++, request.getPhone() != null ? request.getPhone() : "");[m
[32m+[m[32m                    }[m
[32m+[m[32m                    if (hasAddressColumn) {[m
[32m+[m[32m                        pstmt.setString(paramIndex++, request.getAddress() != null ? request.getAddress() : "");[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                    System.out.println("Executing doctor insert SQL with parameters: " +[m
[32m+[m[32m                                      userId + ", " + request.getSpecialization() + ", " +[m
[32m+[m[32m                                      request.getQualification() + ", " + request.getExperience());[m
[32m+[m
[32m+[m[32m                    int rowsAffected = pstmt.executeUpdate();[m
[32m+[m[32m                    System.out.println("Doctor record created successfully. Rows affected: " + rowsAffected);[m
[32m+[m
[32m+[m[32m                    if (rowsAffected <= 0) {[m
[32m+[m[32m                        throw new SQLException("Failed to insert doctor record. No rows affected.");[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                    // Now update the other fields one by one to handle potential schema differences[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        // Try to update each field, but don't fail if a field doesn't exist[m
[32m+[m[32m                        safeUpdateDoctorField(conn, userId, "consultation_fee", "1000");[m
[32m+[m[32m                        safeUpdateDoctorField(conn, userId, "available_days", "Monday,Tuesday,Wednesday,Thursday,Friday");[m
[32m+[m[32m                        safeUpdateDoctorField(conn, userId, "available_time", "09:00 AM - 05:00 PM");[m
[32m+[m[32m                        safeUpdateDoctorField(conn, userId, "bio", request.getBio() != null ? request.getBio() : "");[m
[32m+[m[32m                        safeUpdateDoctorField(conn, userId, "image_url", "/assets/images/doctors/default-doctor.png");[m
[32m+[m
[32m+[m[32m                        // Only update these if they weren't included in the initial INSERT[m
[32m+[m[32m                        if (!hasPhoneColumn) {[m
[32m+[m[32m                            safeUpdateDoctorField(conn, userId, "phone", request.getPhone() != null ? request.getPhone() : "");[m
[32m+[m[32m                        }[m
[32m+[m
[32m+[m[32m                        if (!hasAddressColumn) {[m
[32m+[m[32m                            safeUpdateDoctorField(conn, userId, "address", request.getAddress() != null ? request.getAddress() : "");[m
[32m+[m[32m                        }[m
[32m+[m
[32m+[m[32m                        if (!hasEmailColumn) {[m
[32m+[m[32m                            safeUpdateDoctorField(conn, userId, "email", request.getEmail() != null ? request.getEmail() : "");[m
[32m+[m[32m                        }[m
[32m+[m[32m                    } catch (Exception e) {[m
[32m+[m[32m                        System.out.println("Warning: Some doctor fields could not be updated: " + e.getMessage());[m
[32m+[m[32m                        // Continue anyway since the basic doctor record was created[m
[32m+[m[32m                    }[m
[32m+[m
[32m+[m[32m                    // After successful doctor creation, update the name field separately[m
[32m+[m[32m                    // This is to handle the case where the name column might be added later[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        String firstName = request.getFirstName() != null ? request.getFirstName() : "";[m
[32m+[m[32m                        String lastName = request.getLastName() != null ? request.getLastName() : "";[m
[32m+[m[32m                        String fullName = "Dr. " + firstName + " " + lastName;[m
[32m+[m
[32m+[m[32m                        // Check if the name column exists before trying to update it[m
[32m+[m[32m                        boolean hasNameColumn = false;[m
[32m+[m[32m                        try {[m
[32m+[m[32m                            java.sql.DatabaseMetaData dbmd = conn.getMetaData();[m
[32m+[m[32m                            try (ResultSet columns = dbmd.getColumns(null, null, "doctors", "name")) {[m
[32m+[m[32m                                if (columns.next()) {[m
[32m+[m[32m                                    hasNameColumn = true;[m
[32m+[m[32m                                    System.out.println("Found name column in doctors table");[m
[32m+[m[32m                                }[m
[32m+[m[32m                            }[m
[32m+[m[32m                        } catch (SQLException e) {[m
[32m+[m[32m                            System.out.println("Warning: Could not check if name column exists: " + e.getMessage());[m
[32m+[m[32m                        }[m
[32m+[m
[32m+[m[32m                        if (hasNameColumn) {[m
[32m+[m[32m                            safeUpdateDoctorField(conn, userId, "name", fullName.trim());[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                            System.out.println("Note: name column does not exist in doctors table, skipping update");[m
[32m+[m[32m                        }[m
[32m+[m[32m                    } catch (Exception e) {[m
[32m+[m[32m                        // If this fails, it's not critical - the doctor record was still created[m
[32m+[m[32m                        System.out.println("Note: Could not update doctor name field: " + e.getMessage());[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            } catch (SQLException e) {[m
[32m+[m[32m                System.err.println("Error creating doctor record: " + e.getMessage());[m
[32m+[m[32m                e.printStackTrace();[m
[32m+[m[32m                throw e; // Re-throw to be handled by the caller[m
             }[m
 [m
[31m-            // Delete the request from doctor_registration_requests table[m
[32m+[m[32m            // Now we can safely delete the request as it has been moved to users and doctors tables[m
[32m+[m[32m            System.out.println("Deleting doctor registration request with ID: " + id + " after successful approval");[m
[32m+[m
[32m+[m[32m            // Delete the request[m
             String deleteQuery = "DELETE FROM doctor_registration_requests WHERE id = ?";[m
             try (PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {[m
                 pstmt.setInt(1, id);[m
[31m-                pstmt.executeUpdate();[m
[32m+[m[32m                int rowsAffected = pstmt.executeUpdate();[m
[32m+[m[32m                System.out.println("Doctor registration request deleted. Rows affected: " + rowsAffected);[m
[32m+[m
[32m+[m[32m                if (rowsAffected <= 0) {[m
[32m+[m[32m                    System.err.println("Warning: Failed to delete request after approval, but user and doctor records were created successfully.");[m
[32m+[m[32m                    // Don't throw exception here, as the approval was successful[m
[32m+[m[32m                }[m
             }[m
 [m
[31m-            // Commit the transaction[m
[32m+[m[32m            // Now we can safely commit the transaction[m
             conn.commit();[m
             success = true;[m
[32m+[m[32m            System.out.println("Transaction committed successfully for doctor approval ID: " + id);[m
 [m
         } catch (SQLException | ClassNotFoundException e) {[m
             e.printStackTrace();[m
[32m+[m[32m            System.err.println("Error approving doctor registration request: " + e.getMessage());[m
[32m+[m
[32m+[m[32m            // Print more detailed error information[m
[32m+[m[32m            if (e instanceof SQLException) {[m
[32m+[m[32m                SQLException sqlEx = (SQLException) e;[m
[32m+[m[32m                System.err.println("SQL State: " + sqlEx.getSQLState());[m
[32m+[m[32m                System.err.println("Error Code: " + sqlEx.getErrorCode());[m
[32m+[m
[32m+[m[32m                // Print the full stack trace of nested exceptions[m
[32m+[m[32m                Throwable cause = sqlEx.getCause();[m
[32m+[m[32m                while (cause != null) {[m
[32m+[m[32m                    System.err.println("Caused by: " + cause.getMessage());[m
[32m+[m[32m                    cause = cause.getCause();[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m
             // Rollback the transaction on error[m
             if (conn != null) {[m
                 try {[m
                     conn.rollback();[m
[32m+[m[32m                    System.err.println("Transaction rolled back successfully");[m
                 } catch (SQLException rollbackEx) {[m
                     rollbackEx.printStackTrace();[m
[32m+[m[32m                    System.err.println("Failed to rollback transaction: " + rollbackEx.getMessage());[m
                 }[m
             }[m
         } finally {[m
[31m-            // Restore auto-commit[m
[32m+[m[32m            // Restore auto-commit and close connection[m
             if (conn != null) {[m
                 try {[m
                     conn.setAutoCommit(true);[m
                     conn.close();[m
[32m+[m[32m                    System.out.println("Connection closed successfully");[m
                 } catch (SQLException closeEx) {[m
                     closeEx.printStackTrace();[m
[32m+[m[32m                    System.err.println("Error closing connection: " + closeEx.getMessage());[m
                 }[m
             }[m
         }[m
[36m@@ -296,27 +476,64 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
     /**[m
      * Reject a doctor registration request and delete it from the database[m
      * @param id The ID of the request[m
[31m-     * @param adminNotes Admin notes about the rejection (not used since the request is deleted)[m
[32m+[m[32m     * @param adminNotes Admin notes about the rejection (reason for rejection)[m
      * @return true if the rejection was successful, false otherwise[m
      */[m
     public boolean rejectRequest(int id, String adminNotes) {[m
         // Get the request to make sure it exists[m
         DoctorRegistrationRequest request = getRequestById(id);[m
         if (request == null) {[m
[32m+[m[32m            System.err.println("Doctor registration request not found with ID: " + id);[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        // Check if the request is already approved or rejected[m
[32m+[m[32m        if (!"PENDING".equals(request.getStatus())) {[m
[32m+[m[32m            System.err.println("Cannot reject request with status: " + request.getStatus());[m
             return false;[m
         }[m
 [m
         // Delete the request directly[m
         String deleteQuery = "DELETE FROM doctor_registration_requests WHERE id = ?";[m
 [m
[31m-        try (Connection conn = DBConnection.getConnection();[m
[31m-             PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {[m
[31m-[m
[31m-            pstmt.setInt(1, id);[m
[31m-            int rowsAffected = pstmt.executeUpdate();[m
[31m-            return rowsAffected > 0;[m
[31m-[m
[32m+[m[32m        try (Connection conn = DBConnection.getConnection()) {[m
[32m+[m[32m            // Start transaction[m
[32m+[m[32m            conn.setAutoCommit(false);[m
[32m+[m
[32m+[m[32m            try {[m
[32m+[m[32m                // Log the rejection reason before deleting (for audit purposes)[m
[32m+[m[32m                System.out.println("Rejecting doctor registration request with ID: " + id +[m
[32m+[m[32m                                  ", Reason: " + (adminNotes != null ? adminNotes : "Rejected by admin"));[m
[32m+[m
[32m+[m[32m                // Delete the request[m
[32m+[m[32m                try (PreparedStatement pstmt = conn.prepareStatement(deleteQuery)) {[m
[32m+[m[32m                    pstmt.setInt(1, id);[m
[32m+[m[32m                    int rowsAffected = pstmt.executeUpdate();[m
[32m+[m
[32m+[m[32m                    if (rowsAffected > 0) {[m
[32m+[m[32m                        // Commit the transaction[m
[32m+[m[32m                        conn.commit();[m
[32m+[m[32m                        System.out.println("Doctor registration request with ID: " + id + " rejected and deleted successfully");[m
[32m+[m[32m                        return true;[m
[32m+[m[32m                    } else {[m
[32m+[m[32m                        // Rollback if no rows affected[m
[32m+[m[32m                        conn.rollback();[m
[32m+[m[32m                        System.err.println("Failed to delete rejected request. No rows affected.");[m
[32m+[m[32m                        return false;[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            } catch (SQLException e) {[m
[32m+[m[32m                // Rollback on error[m
[32m+[m[32m                conn.rollback();[m
[32m+[m[32m                System.err.println("Error during request rejection: " + e.getMessage());[m
[32m+[m[32m                e.printStackTrace();[m
[32m+[m[32m                return false;[m
[32m+[m[32m            } finally {[m
[32m+[m[32m                // Restore auto-commit[m
[32m+[m[32m                conn.setAutoCommit(true);[m
[32m+[m[32m            }[m
         } catch (SQLException | ClassNotFoundException e) {[m
[32m+[m[32m            System.err.println("Error rejecting doctor registration request: " + e.getMessage());[m
             e.printStackTrace();[m
             return false;[m
         }[m
[36m@@ -330,46 +547,184 @@[m [mpublic class DoctorRegistrationRequestDAO {[m
      * @throws SQLException If a database error occurs[m
      */[m
     private int createUser(Connection conn, User user) throws SQLException {[m
[31m-        String query = "INSERT INTO users (username, email, password, phone, role, first_name, last_name, date_of_birth, gender, address) " +[m
[31m-                      "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";[m
[31m-[m
[31m-        try (PreparedStatement pstmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {[m
[31m-            pstmt.setString(1, user.getUsername());[m
[31m-            pstmt.setString(2, user.getEmail());[m
[31m-            pstmt.setString(3, user.getPassword()); // Already hashed[m
[31m-            pstmt.setString(4, user.getPhone());[m
[31m-            pstmt.setString(5, user.getRole());[m
[31m-            pstmt.setString(6, user.getFirstName());[m
[31m-            pstmt.setString(7, user.getLastName());[m
[32m+[m[32m        try {[m
[32m+[m[32m            // Validate required fields[m
[32m+[m[32m            if (user.getEmail() == null || user.getEmail().trim().isEmpty()) {[m
[32m+[m[32m                throw new SQLException("Email is required for user creation");[m
[32m+[m[32m            }[m
 [m
[31m-            // Handle date_of_birth (DATE type in database)[m
[31m-            if (user.getDateOfBirth() != null && !user.getDateOfBirth().isEmpty()) {[m
[31m-                try {[m
[31m-                    java.sql.Date sqlDate = java.sql.Date.valueOf(user.getDateOfBirth());[m
[31m-                    pstmt.setDate(8, sqlDate);[m
[31m-                } catch (IllegalArgumentException e) {[m
[31m-                    // If date format is invalid, set it to null[m
[31m-                    pstmt.setNull(8, java.sql.Types.DATE);[m
[32m+[m[32m            if (user.getUsername() == null || user.getUsername().trim().isEmpty()) {[m
[32m+[m[32m                // Generate a username from email if not provided[m
[32m+[m[32m                String emailUsername = user.getEmail().split("@")[0];[m
[32m+[m[32m                user.setUsername(emailUsername);[m
[32m+[m[32m                System.out.println("Generated username from email: " + user.getUsername());[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            if (user.getPassword() == null || user.getPassword().trim().isEmpty()) {[m
[32m+[m[32m                throw new SQLException("Password is required for user creation");[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // First check if the email already exists in the users table[m
[32m+[m[32m            String checkQuery = "SELECT id FROM users WHERE email = ?";[m
[32m+[m[32m            try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {[m
[32m+[m[32m                checkStmt.setString(1, user.getEmail());[m
[32m+[m[32m                try (ResultSet rs = checkStmt.executeQuery()) {[m
[32m+[m[32m                    if (rs.next()) {[m
[32m+[m[32m                        // Email already exists, throw an exception[m
[32m+[m[32m                        throw new SQLException("Email already exists in the users table: " + user.getEmail());[m
[32m+[m[32m                    }[m
                 }[m
[31m-            } else {[m
[31m-                pstmt.setNull(8, java.sql.Types.DATE);[m
             }[m
 [m
[31m-            pstmt.setString(9, user.getGender());[m
[31m-            pstmt.setString(10, user.getAddress());[m
[32m+[m[32m            // Check if username already exists and make it unique if needed[m
[32m+[m[32m            boolean usernameUnique = false;[m
[32m+[m[32m            int attempts = 0;[m
[32m+[m[32m            String originalUsername = user.getUsername();[m
[32m+[m
[32m+[m[32m            while (!usernameUnique && attempts < 5) {[m
[32m+[m[32m                String checkUsernameQuery = "SELECT id FROM users WHERE username = ?";[m
[32m+[m[32m                try (PreparedStatement checkStmt = conn.prepareStatement(checkUsernameQuery)) {[m
[32m+[m[32m                    checkStmt.setString(1, user.getUsername());[m
[32m+[m[32m                    try (ResultSet rs = checkStmt.executeQuery()) {[m
[32m+[m[32m                        if (!rs.next()) {[m
[32m+[m[32m                            // Username is unique[m
[32m+[m[32m                            usernameUnique = true;[m
[32m+[m[32m                        } else {[m
[32m+[m[32m                            // Username already exists, make it unique by adding a timestamp or random number[m
[32m+[m[32m                            user.setUsername(originalUsername + System.currentTimeMillis() + attempts);[m
[32m+[m[32m                            System.out.println("Username already exists, changed to: " + user.getUsername());[m
[32m+[m[32m                            attempts++;[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
 [m
[31m-            int rowsAffected = pstmt.executeUpdate();[m
[32m+[m[32m            if (!usernameUnique) {[m
[32m+[m[32m                throw new SQLException("Could not generate a unique username after multiple attempts");[m
[32m+[m[32m            }[m
 [m
[31m-            if (rowsAffected > 0) {[m
[31m-                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {[m
[31m-                    if (generatedKeys.next()) {[m
[31m-                        return generatedKeys.getInt(1);[m
[32m+[m[32m            // Now insert the user[m
[32m+[m[32m            String query = "INSERT INTO users (username, email, password, phone, role, first_name, last_name, date_of_birth, gender, address) " +[m
[32m+[m[32m                          "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";[m
[32m+[m
[32m+[m[32m            try (PreparedStatement pstmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {[m
[32m+[m[32m                pstmt.setString(1, user.getUsername());[m
[32m+[m[32m                pstmt.setString(2, user.getEmail());[m
[32m+[m[32m                pstmt.setString(3, user.getPassword()); // Already hashed[m
[32m+[m[32m                pstmt.setString(4, user.getPhone() != null ? user.getPhone() : "");[m
[32m+[m[32m                pstmt.setString(5, user.getRole() != null ? user.getRole() : "DOCTOR");[m
[32m+[m[32m                pstmt.setString(6, user.getFirstName() != null ? user.getFirstName() : "");[m
[32m+[m[32m                pstmt.setString(7, user.getLastName() != null ? user.getLastName() : "");[m
[32m+[m
[32m+[m[32m                // Handle date_of_birth[m
[32m+[m[32m                if (user.getDateOfBirth() != null && !user.getDateOfBirth().isEmpty()) {[m
[32m+[m[32m                    try {[m
[32m+[m[32m                        java.sql.Date sqlDate = java.sql.Date.valueOf(user.getDateOfBirth());[m
[32m+[m[32m                        pstmt.setDate(8, sqlDate);[m
[32m+[m[32m                    } catch (IllegalArgumentException e) {[m
[32m+[m[32m                        System.err.println("Invalid date format for date_of_birth: " + user.getDateOfBirth());[m
[32m+[m[32m                        pstmt.setNull(8, java.sql.Types.DATE);[m
                     }[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    pstmt.setNull(8, java.sql.Types.DATE);[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                // Handle gender (ENUM type in database with values 'Male', 'Female', 'Other')[m
[32m+[m[32m                String standardizedGender = standardizeGender(user.getGender());[m
[32m+[m[32m                if (standardizedGender != null) {[m
[32m+[m[32m                    pstmt.setString(9, standardizedGender);[m
[32m+[m[32m                } else {[m
[32m+[m[32m                    pstmt.setNull(9, java.sql.Types.VARCHAR);[m
                 }[m
[32m+[m[32m                pstmt.setString(10, user.getAddress() != null ? user.getAddress() : "");[m
[32m+[m
[32m+[m[32m                System.out.println("Executing SQL: " + query);[m
[32m+[m[32m                System.out.println("With parameters: " + user.getUsername() + ", " + user.getEmail() + ", [PASSWORD], " +[m
[32m+[m[32m                                  user.getPhone() + ", " + user.getRole() + ", " + user.getFirstName() + ", " +[m
[32m+[m[32m                                  user.getLastName() + ", " + user.getDateOfBirth() + ", " +[m
[32m+[m[32m                                  (user.getGender() != null ? user.getGender() : "NULL") + ", " +[m
[32m+[m[32m                                  (user.getAddress() != null ? user.getAddress() : "NULL"));[m
[32m+[m
[32m+[m[32m                int rowsAffected = pstmt.executeUpdate();[m
[32m+[m[32m                System.out.println("User insert rows affected: " + rowsAffected);[m
[32m+[m
[32m+[m[32m                if (rowsAffected > 0) {[m
[32m+[m[32m                    try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {[m
[32m+[m[32m                        if (generatedKeys.next()) {[m
[32m+[m[32m                            int userId = generatedKeys.getInt(1);[m
[32m+[m[32m                            System.out.println("Generated user ID: " + userId);[m
[32m+[m[32m                            return userId;[m
[32m+[m[32m                        }[m
[32m+[m[32m                    }[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                System.err.println("Failed to create user: No rows affected or no generated keys");[m
[32m+[m[32m                return -1;[m
[32m+[m[32m            }[m
[32m+[m[32m        } catch (SQLException e) {[m
[32m+[m[32m            System.err.println("Error creating user: " + e.getMessage());[m
[32m+[m[32m            e.printStackTrace();[m
[32m+[m[32m            throw e; // Re-throw to be handled by the caller[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Helper method to standardize gender values to match database ENUM[m
[32m+[m[32m     * @param gender The gender value to standardize[m
[32m+[m[32m     * @return Standardized gender value or null if invalid[m
[32m+[m[32m     */[m
[32m+[m[32m    private String standardizeGender(String gender) {[m
[32m+[m[32m        if (gender != null && !gender.isEmpty()) {[m
[32m+[m[32m            if (gender.equalsIgnoreCase("male")) {[m
[32m+[m[32m                return "Male";[m
[32m+[m[32m            } else if (gender.equalsIgnoreCase("female")) {[m
[32m+[m[32m                return "Female";[m
[32m+[m[32m            } else if (gender.equalsIgnoreCase("other")) {[m
[32m+[m[32m                return "Other";[m
[32m+[m[32m            } else {[m
[32m+[m[32m                System.out.println("Invalid gender value: " + gender + ". Setting to NULL.");[m
[32m+[m[32m                return null;[m
             }[m
         }[m
[32m+[m[32m        return null;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Helper method to update a single field in the doctors table[m
[32m+[m[32m     * @param conn The database connection[m
[32m+[m[32m     * @param userId The user ID of the doctor[m
[32m+[m[32m     * @param fieldName The name of the field to update[m
[32m+[m[32m     * @param fieldValue The value to set[m
[32m+[m[32m     * @throws SQLException If a database error occurs[m
[32m+[m[32m     */[m
[32m+[m[32m    private void updateDoctorField(Connection conn, int userId, String fieldName, String fieldValue) throws SQLException {[m
[32m+[m[32m        String updateQuery = "UPDATE doctors SET " + fieldName + " = ? WHERE user_id = ?";[m
[32m+[m[32m        try (PreparedStatement pstmt = conn.prepareStatement(updateQuery)) {[m
[32m+[m[32m            pstmt.setString(1, fieldValue);[m
[32m+[m[32m            pstmt.setInt(2, userId);[m
[32m+[m[32m            pstmt.executeUpdate();[m
[32m+[m[32m            System.out.println("Updated doctor field: " + fieldName + " = " + fieldValue);[m
[32m+[m[32m        } catch (SQLException e) {[m
[32m+[m[32m            System.out.println("Failed to update doctor field " + fieldName + ": " + e.getMessage());[m
[32m+[m[32m            throw e;[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
 [m
[31m-        return -1;[m
[32m+[m[32m    /**[m
[32m+[m[32m     * Helper method to safely update a single field in the doctors table[m
[32m+[m[32m     * This method doesn't throw an exception if the update fails[m
[32m+[m[32m     * @param conn The database connection[m
[32m+[m[32m     * @param userId The user ID of the doctor[m
[32m+[m[32m     * @param fieldName The name of the field to update[m
[32m+[m[32m     * @param fieldValue The value to set[m
[32m+[m[32m     */[m
[32m+[m[32m    private void safeUpdateDoctorField(Connection conn, int userId, String fieldName, String fieldValue) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            updateDoctorField(conn, userId, fieldName, fieldValue);[m
[32m+[m[32m        } catch (SQLException e) {[m
[32m+[m[32m            System.out.println("Note: Could not update doctor field " + fieldName + ": " + e.getMessage());[m
[32m+[m[32m            // Ignore the exception - this is expected for fields that don't exist[m
[32m+[m[32m        }[m
     }[m
 [m
     /**[m
